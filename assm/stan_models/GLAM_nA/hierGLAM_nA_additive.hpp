// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace hierGLAM_nA_additive_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 159> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 85, column 4 to column 18)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 86, column 4 to column 14)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 87, column 4 to column 16)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 88, column 4 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 89, column 4 to column 16)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 91, column 4 to column 27)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 92, column 4 to column 23)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 93, column 4 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 94, column 4 to column 28)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 95, column 4 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 97, column 4 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 98, column 4 to column 22)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 99, column 4 to column 24)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 100, column 4 to column 27)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 101, column 4 to column 24)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 105, column 4 to column 34)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 106, column 4 to column 31)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 107, column 4 to column 29)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 109, column 4 to column 37)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 110, column 4 to column 33)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 111, column 4 to column 35)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 112, column 4 to column 38)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 113, column 4 to column 35)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 115, column 1 to column 31)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 116, column 4 to column 30)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 117, column 4 to column 32)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 118, column 4 to column 35)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 119, column 4 to column 32)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 123, column 4 to column 20)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 124, column 4 to column 20)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 181, column 4 to column 22)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 126, column 4 to column 45)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 127, column 4 to column 37)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 128, column 4 to column 41)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 129, column 4 to column 47)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 130, column 4 to column 41)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 133, column 8 to column 68)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 134, column 8 to column 52)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 135, column 8 to column 60)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 136, column 8 to column 72)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 137, column 8 to column 60)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 132, column 16 to line 138, column 2)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 132, column 1 to line 138, column 2)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 141, column 2 to column 33)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 142, column 8 to column 35)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 145, column 12 to column 60)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 144, column 23 to line 146, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 144, column 8 to line 146, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 148, column 8 to column 40)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 149, column 8 to column 40)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 150, column 8 to column 40)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 153, column 12 to column 79)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 152, column 23 to line 154, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 152, column 8 to line 154, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 140, column 16 to line 155, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 140, column 1 to line 155, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 184, column 12 to column 132)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 183, column 22 to line 185, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 183, column 8 to line 185, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 182, column 4 to line 186, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 159, column 4 to column 56)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 160, column 1 to column 41)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 161, column 4 to column 50)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 162, column 4 to column 59)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 163, column 4 to column 50)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 165, column 4 to column 56)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 166, column 4 to column 44)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 167, column 4 to column 50)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 168, column 4 to column 59)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 169, column 4 to column 50)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 171, column 4 to column 27)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 172, column 4 to column 23)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 173, column 4 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 174, column 4 to column 28)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 175, column 4 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 177, column 4 to column 39)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 58, column 4 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 59, column 4 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 60, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 60, column 4 to column 39)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 62, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 62, column 4 to column 41)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 63, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 63, column 4 to column 30)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 65, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 65, column 4 to column 32)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 67, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 67, column 4 to column 34)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 69, column 4 to column 27)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 70, column 4 to column 23)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 71, column 4 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 72, column 4 to column 28)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 73, column 4 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 77, column 12 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 77, column 4 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 79, column 8 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 80, column 8 to column 29)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 78, column 18 to line 81, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 78, column 4 to line 81, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 97, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 98, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 99, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 100, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 101, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 105, column 20 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 106, column 20 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 107, column 20 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 109, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 110, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 111, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 112, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 113, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 181, column 11 to column 12)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 3, column 10 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 4, column 10 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 5, column 10 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 6, column 10 to column 35)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 7, column 10 to column 103)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 8, column 10 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 2, column 46 to line 9, column 6)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 12, column 10 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 13, column 10 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 14, column 10 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 15, column 10 to column 35)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 16, column 10 to column 100)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 17, column 10 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 11, column 46 to line 18, column 6)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 22, column 10 to column 17)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 23, column 17 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 23, column 10 to column 32)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 24, column 10 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 25, column 10 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 26, column 10 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 29, column 15 to column 36)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 49, column 20 to column 36)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 48, column 19 to line 50, column 16)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 31, column 16 to column 24)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 37, column 20 to column 71)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 36, column 22 to line 38, column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 34, column 20 to column 61)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 33, column 34 to line 35, column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 33, column 18 to line 38, column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 32, column 29 to line 39, column 17)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 32, column 16 to line 39, column 17)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 40, column 18 to column 36)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 42, column 20 to column 36)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 41, column 36 to line 43, column 17)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 41, column 16 to line 43, column 17)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 45, column 18 to column 34)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 44, column 35 to line 46, column 17)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 44, column 16 to line 46, column 17)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 30, column 24 to line 47, column 16)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 30, column 15 to line 50, column 16)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 28, column 31 to line 51, column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 28, column 10 to line 51, column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 52, column 10 to column 31)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 53, column 10 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GLAM_nA/hierGLAM_nA_additive.stan', line 20, column 70 to line 54, column 6)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
race_pdf(const T0__& t, const T1__& sigma, const T2__& v, std::ostream*
         pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
race_cdf(const T0__& t, const T1__& sigma, const T2__& v, std::ostream*
         pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
race_lpdf(const T0__& RT_arg__, const T1__& sigma_arg__, const T2__&
          ndt_arg__, const T3__& drift_arg__, std::ostream* pstream__);
// real race_pdf(real, real, real)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>*>
stan::promote_args_t<T0__, T1__, T2__>
race_pdf(const T0__& t, const T1__& sigma, const T2__& v, std::ostream*
         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ pdf = DUMMY_VAR__;
    local_scalar_t__ lambda = DUMMY_VAR__;
    local_scalar_t__ mu = DUMMY_VAR__;
    current_statement__ = 116;
    mu = (1 / v);
    current_statement__ = 117;
    lambda = (1 / stan::math::pow(sigma, 2));
    current_statement__ = 118;
    pdf = (stan::math::sqrt((lambda / ((2 * stan::math::pi()) *
             stan::math::pow(t, 3))))
      *
      stan::math::exp((-((lambda * stan::math::pow((t - mu), 2))) / ((2 *
        stan::math::pow(mu, 2)) * t))));
    current_statement__ = 119;
    return pdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real race_cdf(real, real, real)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>*>
stan::promote_args_t<T0__, T1__, T2__>
race_cdf(const T0__& t, const T1__& sigma, const T2__& v, std::ostream*
         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ cdf = DUMMY_VAR__;
    local_scalar_t__ lambda = DUMMY_VAR__;
    local_scalar_t__ mu = DUMMY_VAR__;
    current_statement__ = 123;
    mu = (1 / v);
    current_statement__ = 124;
    lambda = (1 / stan::math::pow(sigma, 2));
    current_statement__ = 125;
    cdf = (stan::math::Phi((stan::math::sqrt((lambda / t)) * ((t / mu) - 1)))
      + (stan::math::exp(((2 * lambda) / mu)) *
      stan::math::Phi((-(stan::math::sqrt((lambda / t))) * ((t / mu) + 1)))));
    current_statement__ = 126;
    return cdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real race_lpdf(matrix, vector, vector, matrix)
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>>
race_lpdf(const T0__& RT_arg__, const T1__& sigma_arg__, const T2__&
          ndt_arg__, const T3__& drift_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& RT = stan::math::to_ref(RT_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& ndt = stan::math::to_ref(ndt_arg__);
  const auto& drift = stan::math::to_ref(drift_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ t = DUMMY_VAR__;
    current_statement__ = 129;
    stan::math::validate_non_negative_index("prob", "rows(RT)",
      stan::math::rows(RT));
    Eigen::Matrix<local_scalar_t__,-1,1> prob =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(RT),
        DUMMY_VAR__);
    local_scalar_t__ cdf = DUMMY_VAR__;
    local_scalar_t__ pdf = DUMMY_VAR__;
    local_scalar_t__ out = DUMMY_VAR__;
    current_statement__ = 155;
    for (int i = 1; i <= stan::math::rows(RT); ++i) {
      current_statement__ = 134;
      t = (stan::model::rvalue(RT, "RT", stan::model::index_uni(i),
             stan::model::index_uni(1))
        - stan::model::rvalue(ndt, "ndt", stan::model::index_uni(i)));
      current_statement__ = 153;
      if (stan::math::logical_gt(t, 0)) {
        current_statement__ = 137;
        cdf = 1;
        current_statement__ = 144;
        for (int j = 1; j <= 3; ++j) {
          current_statement__ = 142;
          if (stan::math::logical_eq(
                stan::model::rvalue(RT, "RT", stan::model::index_uni(i),
                  stan::model::index_uni(2)), j)) {
            current_statement__ = 140;
            pdf = race_pdf(t,
                    stan::model::rvalue(sigma, "sigma",
                      stan::model::index_uni(i)),
                    stan::model::rvalue(drift, "drift",
                      stan::model::index_uni(i), stan::model::index_uni(j)),
                    pstream__);
          } else {
            current_statement__ = 138;
            cdf = ((1 -
              race_cdf(t,
                stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)),
                stan::model::rvalue(drift, "drift",
                  stan::model::index_uni(i), stan::model::index_uni(j)),
                pstream__))
              * cdf);
          }
        }
        current_statement__ = 145;
        stan::model::assign(prob, (pdf * cdf), "assigning variable prob",
          stan::model::index_uni(i));
        current_statement__ = 148;
        if (stan::math::logical_lt(
              stan::model::rvalue(prob, "prob", stan::model::index_uni(i)),
              1e-10)) {
          current_statement__ = 146;
          stan::model::assign(prob, 1e-10, "assigning variable prob",
            stan::model::index_uni(i));
        }
        current_statement__ = 151;
        if (stan::math::is_nan(
              stan::model::rvalue(prob, "prob", stan::model::index_uni(i)))) {
          current_statement__ = 149;
          stan::model::assign(prob, 1e-10, "assigning variable prob",
            stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 135;
        stan::model::assign(prob, 1e-10, "assigning variable prob",
          stan::model::index_uni(i));
      }
    }
    current_statement__ = 156;
    out = stan::math::sum(stan::math::log(prob));
    current_statement__ = 157;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class hierGLAM_nA_additive_model final : public model_base_crtp<hierGLAM_nA_additive_model> {
 private:
  int N;
  int L;
  std::vector<int> sbj;
  std::vector<int> choice;
  std::vector<double> rt;
  std::vector<std::vector<double>> G;
  std::vector<std::vector<double>> val;
  Eigen::Matrix<double,-1,1> sigma_priors_data__;
  Eigen::Matrix<double,-1,1> v_priors_data__;
  Eigen::Matrix<double,-1,1> tau_priors_data__;
  Eigen::Matrix<double,-1,1> lambda_priors_data__;
  Eigen::Matrix<double,-1,1> ndt_priors_data__;
  Eigen::Matrix<double,-1,-1> RT_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> v_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> tau_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> lambda_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ndt_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> RT{nullptr, 0, 0};
 public:
  ~hierGLAM_nA_additive_model() {}
  hierGLAM_nA_additive_model(stan::io::var_context& context__, unsigned int
                             random_seed__ = 0, std::ostream*
                             pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "hierGLAM_nA_additive_model_namespace::hierGLAM_nA_additive_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 77;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 77;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 78;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 78;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 78;
      stan::math::check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("sbj", "N", N);
      current_statement__ = 80;
      context__.validate_dims("data initialization", "sbj", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      sbj = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 80;
      sbj = context__.vals_i("sbj");
      current_statement__ = 80;
      stan::math::check_greater_or_equal(function__, "sbj", sbj, 1);
      current_statement__ = 80;
      stan::math::check_less_or_equal(function__, "sbj", sbj, L);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("choice", "N", N);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "choice", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      choice = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 82;
      choice = context__.vals_i("choice");
      current_statement__ = 82;
      stan::math::check_greater_or_equal(function__, "choice", choice, 1);
      current_statement__ = 82;
      stan::math::check_less_or_equal(function__, "choice", choice, 3);
      current_statement__ = 83;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "rt", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      rt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 84;
      rt = context__.vals_r("rt");
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("G", "N", N);
      current_statement__ = 86;
      context__.validate_dims("data initialization", "G", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(3)});
      G = std::vector<std::vector<double>>(N,
            std::vector<double>(3, std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> G_flat__;
        current_statement__ = 86;
        G_flat__ = context__.vals_r("G");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(G, G_flat__[(pos__ - 1)],
              "assigning variable G", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 86;
      stan::math::check_greater_or_equal(function__, "G", G, 0);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("val", "N", N);
      current_statement__ = 88;
      context__.validate_dims("data initialization", "val", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(3)});
      val = std::vector<std::vector<double>>(N,
              std::vector<double>(3,
                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> val_flat__;
        current_statement__ = 88;
        val_flat__ = context__.vals_r("val");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            stan::model::assign(val, val_flat__[(pos__ - 1)],
              "assigning variable val", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "val", val, 0);
      current_statement__ = 89;
      context__.validate_dims("data initialization", "sigma_priors",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      sigma_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                              std::numeric_limits<double>::quiet_NaN());
      new (&sigma_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_priors_data__.data(), 4);
      {
        std::vector<local_scalar_t__> sigma_priors_flat__;
        current_statement__ = 89;
        sigma_priors_flat__ = context__.vals_r("sigma_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(sigma_priors, sigma_priors_flat__[(pos__ - 1)],
            "assigning variable sigma_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 90;
      context__.validate_dims("data initialization", "v_priors", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      v_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                          std::numeric_limits<double>::quiet_NaN());
      new (&v_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(v_priors_data__.data(), 4);
      {
        std::vector<local_scalar_t__> v_priors_flat__;
        current_statement__ = 90;
        v_priors_flat__ = context__.vals_r("v_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(v_priors, v_priors_flat__[(pos__ - 1)],
            "assigning variable v_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 91;
      context__.validate_dims("data initialization", "tau_priors", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      tau_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                            std::numeric_limits<double>::quiet_NaN());
      new (&tau_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(tau_priors_data__.data(), 4);
      {
        std::vector<local_scalar_t__> tau_priors_flat__;
        current_statement__ = 91;
        tau_priors_flat__ = context__.vals_r("tau_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(tau_priors, tau_priors_flat__[(pos__ - 1)],
            "assigning variable tau_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 92;
      context__.validate_dims("data initialization", "lambda_priors",
        "double", std::vector<size_t>{static_cast<size_t>(4)});
      lambda_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                               std::numeric_limits<double>::quiet_NaN());
      new (&lambda_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(lambda_priors_data__.data(),
        4);
      {
        std::vector<local_scalar_t__> lambda_priors_flat__;
        current_statement__ = 92;
        lambda_priors_flat__ = context__.vals_r("lambda_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(lambda_priors, lambda_priors_flat__[(pos__ -
            1)], "assigning variable lambda_priors",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 93;
      context__.validate_dims("data initialization", "ndt_priors", "double",
        std::vector<size_t>{static_cast<size_t>(4)});
      ndt_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(4,
                            std::numeric_limits<double>::quiet_NaN());
      new (&ndt_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ndt_priors_data__.data(), 4);
      {
        std::vector<local_scalar_t__> ndt_priors_flat__;
        current_statement__ = 93;
        ndt_priors_flat__ = context__.vals_r("ndt_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          stan::model::assign(ndt_priors, ndt_priors_flat__[(pos__ - 1)],
            "assigning variable ndt_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 94;
      stan::math::validate_non_negative_index("RT", "N", N);
      current_statement__ = 95;
      RT_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, 2,
                    std::numeric_limits<double>::quiet_NaN());
      new (&RT) Eigen::Map<Eigen::Matrix<double,-1,-1>>(RT_data__.data(), N,
        2);
      current_statement__ = 99;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 96;
        stan::model::assign(RT,
          stan::model::rvalue(rt, "rt", stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
          stan::model::index_uni(1));
        current_statement__ = 97;
        stan::model::assign(RT,
          stan::model::rvalue(choice, "choice", stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
          stan::model::index_uni(2));
      }
      current_statement__ = 100;
      stan::math::validate_non_negative_index("z_sigma", "L", L);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("z_v", "L", L);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("z_tau", "L", L);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("z_lambda", "L", L);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("z_ndt", "L", L);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("drift_t", "N", N);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("sigma_t", "N", N);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("ndt_t", "N", N);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("sigma_sbj", "L", L);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("v_sbj", "L", L);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("tau_sbj", "L", L);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("lambda_sbj", "L", L);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("ndt_sbj", "L", L);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + L + L + L + L +
      L;
  }
  inline std::string model_name() const final {
    return "hierGLAM_nA_additive_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = "};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "hierGLAM_nA_additive_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ mu_sigma = DUMMY_VAR__;
      current_statement__ = 1;
      mu_sigma = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_v = DUMMY_VAR__;
      current_statement__ = 2;
      mu_v = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_tau = DUMMY_VAR__;
      current_statement__ = 3;
      mu_tau = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_lambda = DUMMY_VAR__;
      current_statement__ = 4;
      mu_lambda = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_ndt = DUMMY_VAR__;
      current_statement__ = 5;
      mu_ndt = in__.template read<local_scalar_t__>();
      local_scalar_t__ sd_sigma = DUMMY_VAR__;
      current_statement__ = 6;
      sd_sigma = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ sd_v = DUMMY_VAR__;
      current_statement__ = 7;
      sd_v = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sd_tau = DUMMY_VAR__;
      current_statement__ = 8;
      sd_tau = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      local_scalar_t__ sd_lambda = DUMMY_VAR__;
      current_statement__ = 9;
      sd_lambda = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ sd_ndt = DUMMY_VAR__;
      current_statement__ = 10;
      sd_ndt = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      std::vector<local_scalar_t__> z_sigma =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 11;
      z_sigma = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_v =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 12;
      z_v = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_tau =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 13;
      z_tau = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_lambda =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 14;
      z_lambda = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_ndt =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 15;
      z_ndt = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<local_scalar_t__,-1,-1> drift_t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, 3, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ndt_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> sigma_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> v_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> tau_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> lambda_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> ndt_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      local_scalar_t__ transf_mu_sigma = DUMMY_VAR__;
      local_scalar_t__ transf_mu_v = DUMMY_VAR__;
      local_scalar_t__ transf_mu_tau = DUMMY_VAR__;
      local_scalar_t__ transf_mu_lambda = DUMMY_VAR__;
      local_scalar_t__ transf_mu_ndt = DUMMY_VAR__;
      std::vector<local_scalar_t__> A =
        std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      std::vector<local_scalar_t__> R =
        std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      current_statement__ = 32;
      transf_mu_sigma = stan::math::log((1 + stan::math::exp(mu_sigma)));
      current_statement__ = 33;
      transf_mu_v = stan::math::log((1 + stan::math::exp(mu_v)));
      current_statement__ = 34;
      transf_mu_tau = stan::math::log((1 + stan::math::exp(mu_tau)));
      current_statement__ = 35;
      transf_mu_lambda = stan::math::log((1 + stan::math::exp(mu_lambda)));
      current_statement__ = 36;
      transf_mu_ndt = stan::math::log((1 + stan::math::exp(mu_ndt)));
      current_statement__ = 43;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 37;
        stan::model::assign(sigma_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_sigma +
              (stan::model::rvalue(z_sigma, "z_sigma",
                 stan::model::index_uni(l)) * sd_sigma))))),
          "assigning variable sigma_sbj", stan::model::index_uni(l));
        current_statement__ = 38;
        stan::model::assign(v_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_v +
              (stan::model::rvalue(z_v, "z_v", stan::model::index_uni(l)) *
              sd_v))))), "assigning variable v_sbj",
          stan::model::index_uni(l));
        current_statement__ = 39;
        stan::model::assign(tau_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_tau +
              (stan::model::rvalue(z_tau, "z_tau", stan::model::index_uni(l))
              * sd_tau))))), "assigning variable tau_sbj",
          stan::model::index_uni(l));
        current_statement__ = 40;
        stan::model::assign(lambda_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_lambda +
              (stan::model::rvalue(z_lambda, "z_lambda",
                 stan::model::index_uni(l)) * sd_lambda))))),
          "assigning variable lambda_sbj", stan::model::index_uni(l));
        current_statement__ = 41;
        stan::model::assign(ndt_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_ndt +
              (stan::model::rvalue(z_ndt, "z_ndt", stan::model::index_uni(l))
              * sd_ndt))))), "assigning variable ndt_sbj",
          stan::model::index_uni(l));
      }
      current_statement__ = 56;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 44;
        stan::model::assign(sigma_t,
          stan::model::rvalue(sigma_sbj, "sigma_sbj",
            stan::model::index_uni(
              stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))),
          "assigning variable sigma_t", stan::model::index_uni(n));
        current_statement__ = 45;
        stan::model::assign(ndt_t,
          stan::model::rvalue(ndt_sbj, "ndt_sbj",
            stan::model::index_uni(
              stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))),
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 48;
        for (int i = 1; i <= 3; ++i) {
          current_statement__ = 46;
          stan::model::assign(A,
            (stan::model::rvalue(val, "val", stan::model::index_uni(n),
               stan::model::index_uni(i)) +
            (stan::model::rvalue(G, "G", stan::model::index_uni(n),
               stan::model::index_uni(i)) *
            stan::model::rvalue(lambda_sbj, "lambda_sbj",
              stan::model::index_uni(
                stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))))),
            "assigning variable A", stan::model::index_uni(i));
        }
        current_statement__ = 49;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(1)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           2)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           3))).finished())),
          "assigning variable R", stan::model::index_uni(1));
        current_statement__ = 50;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(2)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           1)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           3))).finished())),
          "assigning variable R", stan::model::index_uni(2));
        current_statement__ = 51;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(3)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           1)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           2))).finished())),
          "assigning variable R", stan::model::index_uni(3));
        current_statement__ = 54;
        for (int i = 1; i <= 3; ++i) {
          current_statement__ = 52;
          stan::model::assign(drift_t,
            (stan::model::rvalue(v_sbj, "v_sbj",
               stan::model::index_uni(
                 stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n))))
            / (1 +
            stan::math::exp(
              (-(stan::model::rvalue(tau_sbj, "tau_sbj",
                   stan::model::index_uni(
                     stan::model::rvalue(sbj, "sbj",
                       stan::model::index_uni(n))))) *
              stan::model::rvalue(R, "R", stan::model::index_uni(i)))))),
            "assigning variable drift_t", stan::model::index_uni(n),
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "drift_t", drift_t, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "sigma_t", sigma_t, 0);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "sigma_sbj", sigma_sbj,
        0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "v_sbj", v_sbj, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "tau_sbj", tau_sbj, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "lambda_sbj",
        lambda_sbj, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "ndt_sbj", ndt_sbj, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "transf_mu_sigma",
        transf_mu_sigma, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "transf_mu_v",
        transf_mu_v, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "transf_mu_tau",
        transf_mu_tau, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "transf_mu_lambda",
        transf_mu_lambda, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "transf_mu_ndt",
        transf_mu_ndt, 0);
      {
        current_statement__ = 61;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_sigma,
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 62;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_v,
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_tau,
                         stan::model::rvalue(tau_priors, "tau_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(tau_priors, "tau_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 64;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_lambda,
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 65;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_ndt,
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 66;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_sigma,
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 67;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_v,
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 68;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_tau,
                         stan::model::rvalue(tau_priors, "tau_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(tau_priors, "tau_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 69;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_lambda,
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 70;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_ndt,
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 71;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_sigma, 0, 1));
        current_statement__ = 72;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_v, 0, 1));
        current_statement__ = 73;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_tau, 0, 1));
        current_statement__ = 74;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_lambda, 0, 1));
        current_statement__ = 75;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_ndt, 0, 1));
        current_statement__ = 76;
        lp_accum__.add(race_lpdf<propto__>(RT, sigma_t, ndt_t, drift_t,
                         pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "hierGLAM_nA_additive_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ mu_sigma = DUMMY_VAR__;
      current_statement__ = 1;
      mu_sigma = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_v = DUMMY_VAR__;
      current_statement__ = 2;
      mu_v = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_tau = DUMMY_VAR__;
      current_statement__ = 3;
      mu_tau = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_lambda = DUMMY_VAR__;
      current_statement__ = 4;
      mu_lambda = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu_ndt = DUMMY_VAR__;
      current_statement__ = 5;
      mu_ndt = in__.template read<local_scalar_t__>();
      local_scalar_t__ sd_sigma = DUMMY_VAR__;
      current_statement__ = 6;
      sd_sigma = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ sd_v = DUMMY_VAR__;
      current_statement__ = 7;
      sd_v = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sd_tau = DUMMY_VAR__;
      current_statement__ = 8;
      sd_tau = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      local_scalar_t__ sd_lambda = DUMMY_VAR__;
      current_statement__ = 9;
      sd_lambda = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ sd_ndt = DUMMY_VAR__;
      current_statement__ = 10;
      sd_ndt = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      std::vector<local_scalar_t__> z_sigma =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 11;
      z_sigma = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_v =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 12;
      z_v = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_tau =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 13;
      z_tau = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_lambda =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 14;
      z_lambda = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<local_scalar_t__> z_ndt =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 15;
      z_ndt = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<local_scalar_t__,-1,-1> drift_t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, 3, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ndt_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      std::vector<local_scalar_t__> sigma_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> v_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> tau_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> lambda_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      std::vector<local_scalar_t__> ndt_sbj =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      local_scalar_t__ transf_mu_sigma = DUMMY_VAR__;
      local_scalar_t__ transf_mu_v = DUMMY_VAR__;
      local_scalar_t__ transf_mu_tau = DUMMY_VAR__;
      local_scalar_t__ transf_mu_lambda = DUMMY_VAR__;
      local_scalar_t__ transf_mu_ndt = DUMMY_VAR__;
      std::vector<local_scalar_t__> A =
        std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      std::vector<local_scalar_t__> R =
        std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      current_statement__ = 32;
      transf_mu_sigma = stan::math::log((1 + stan::math::exp(mu_sigma)));
      current_statement__ = 33;
      transf_mu_v = stan::math::log((1 + stan::math::exp(mu_v)));
      current_statement__ = 34;
      transf_mu_tau = stan::math::log((1 + stan::math::exp(mu_tau)));
      current_statement__ = 35;
      transf_mu_lambda = stan::math::log((1 + stan::math::exp(mu_lambda)));
      current_statement__ = 36;
      transf_mu_ndt = stan::math::log((1 + stan::math::exp(mu_ndt)));
      current_statement__ = 43;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 37;
        stan::model::assign(sigma_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_sigma +
              (stan::model::rvalue(z_sigma, "z_sigma",
                 stan::model::index_uni(l)) * sd_sigma))))),
          "assigning variable sigma_sbj", stan::model::index_uni(l));
        current_statement__ = 38;
        stan::model::assign(v_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_v +
              (stan::model::rvalue(z_v, "z_v", stan::model::index_uni(l)) *
              sd_v))))), "assigning variable v_sbj",
          stan::model::index_uni(l));
        current_statement__ = 39;
        stan::model::assign(tau_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_tau +
              (stan::model::rvalue(z_tau, "z_tau", stan::model::index_uni(l))
              * sd_tau))))), "assigning variable tau_sbj",
          stan::model::index_uni(l));
        current_statement__ = 40;
        stan::model::assign(lambda_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_lambda +
              (stan::model::rvalue(z_lambda, "z_lambda",
                 stan::model::index_uni(l)) * sd_lambda))))),
          "assigning variable lambda_sbj", stan::model::index_uni(l));
        current_statement__ = 41;
        stan::model::assign(ndt_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_ndt +
              (stan::model::rvalue(z_ndt, "z_ndt", stan::model::index_uni(l))
              * sd_ndt))))), "assigning variable ndt_sbj",
          stan::model::index_uni(l));
      }
      current_statement__ = 56;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 44;
        stan::model::assign(sigma_t,
          stan::model::rvalue(sigma_sbj, "sigma_sbj",
            stan::model::index_uni(
              stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))),
          "assigning variable sigma_t", stan::model::index_uni(n));
        current_statement__ = 45;
        stan::model::assign(ndt_t,
          stan::model::rvalue(ndt_sbj, "ndt_sbj",
            stan::model::index_uni(
              stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))),
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 48;
        for (int i = 1; i <= 3; ++i) {
          current_statement__ = 46;
          stan::model::assign(A,
            (stan::model::rvalue(val, "val", stan::model::index_uni(n),
               stan::model::index_uni(i)) +
            (stan::model::rvalue(G, "G", stan::model::index_uni(n),
               stan::model::index_uni(i)) *
            stan::model::rvalue(lambda_sbj, "lambda_sbj",
              stan::model::index_uni(
                stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))))),
            "assigning variable A", stan::model::index_uni(i));
        }
        current_statement__ = 49;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(1)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           2)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           3))).finished())),
          "assigning variable R", stan::model::index_uni(1));
        current_statement__ = 50;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(2)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           1)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           3))).finished())),
          "assigning variable R", stan::model::index_uni(2));
        current_statement__ = 51;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(3)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           1)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           2))).finished())),
          "assigning variable R", stan::model::index_uni(3));
        current_statement__ = 54;
        for (int i = 1; i <= 3; ++i) {
          current_statement__ = 52;
          stan::model::assign(drift_t,
            (stan::model::rvalue(v_sbj, "v_sbj",
               stan::model::index_uni(
                 stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n))))
            / (1 +
            stan::math::exp(
              (-(stan::model::rvalue(tau_sbj, "tau_sbj",
                   stan::model::index_uni(
                     stan::model::rvalue(sbj, "sbj",
                       stan::model::index_uni(n))))) *
              stan::model::rvalue(R, "R", stan::model::index_uni(i)))))),
            "assigning variable drift_t", stan::model::index_uni(n),
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "drift_t", drift_t, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "sigma_t", sigma_t, 0);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "sigma_sbj", sigma_sbj,
        0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "v_sbj", v_sbj, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "tau_sbj", tau_sbj, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "lambda_sbj",
        lambda_sbj, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "ndt_sbj", ndt_sbj, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "transf_mu_sigma",
        transf_mu_sigma, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "transf_mu_v",
        transf_mu_v, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "transf_mu_tau",
        transf_mu_tau, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "transf_mu_lambda",
        transf_mu_lambda, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "transf_mu_ndt",
        transf_mu_ndt, 0);
      {
        current_statement__ = 61;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_sigma,
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 62;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_v,
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 63;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_tau,
                         stan::model::rvalue(tau_priors, "tau_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(tau_priors, "tau_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 64;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_lambda,
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 65;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_ndt,
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 66;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_sigma,
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 67;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_v,
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 68;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_tau,
                         stan::model::rvalue(tau_priors, "tau_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(tau_priors, "tau_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 69;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_lambda,
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 70;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sd_ndt,
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(3)),
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(4))));
        current_statement__ = 71;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_sigma, 0, 1));
        current_statement__ = 72;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_v, 0, 1));
        current_statement__ = 73;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_tau, 0, 1));
        current_statement__ = 74;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_lambda, 0, 1));
        current_statement__ = 75;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z_ndt, 0, 1));
        current_statement__ = 76;
        lp_accum__.add(race_lpdf<propto__>(RT, sigma_t, ndt_t, drift_t,
                         pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "hierGLAM_nA_additive_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double mu_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu_sigma = in__.template read<local_scalar_t__>();
      double mu_v = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu_v = in__.template read<local_scalar_t__>();
      double mu_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      mu_tau = in__.template read<local_scalar_t__>();
      double mu_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      mu_lambda = in__.template read<local_scalar_t__>();
      double mu_ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      mu_ndt = in__.template read<local_scalar_t__>();
      double sd_sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sd_sigma = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double sd_v = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sd_v = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double sd_tau = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 8;
      sd_tau = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      double sd_lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 9;
      sd_lambda = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double sd_ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 10;
      sd_ndt = in__.template read_constrain_lb<local_scalar_t__,
                 jacobian__>(0, lp__);
      std::vector<double> z_sigma =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      z_sigma = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_v =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      z_v = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_tau =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      z_tau = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_lambda =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      z_lambda = in__.template read<std::vector<local_scalar_t__>>(L);
      std::vector<double> z_ndt =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      z_ndt = in__.template read<std::vector<local_scalar_t__>>(L);
      Eigen::Matrix<double,-1,-1> drift_t =
        Eigen::Matrix<double,-1,-1>::Constant(N, 3,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ndt_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> sigma_sbj =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> v_sbj =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> tau_sbj =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> lambda_sbj =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> ndt_sbj =
        std::vector<double>(L, std::numeric_limits<double>::quiet_NaN());
      double transf_mu_sigma = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_v = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_tau = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_lambda = std::numeric_limits<double>::quiet_NaN();
      double transf_mu_ndt = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> A =
        std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> R =
        std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      out__.write(mu_sigma);
      out__.write(mu_v);
      out__.write(mu_tau);
      out__.write(mu_lambda);
      out__.write(mu_ndt);
      out__.write(sd_sigma);
      out__.write(sd_v);
      out__.write(sd_tau);
      out__.write(sd_lambda);
      out__.write(sd_ndt);
      out__.write(z_sigma);
      out__.write(z_v);
      out__.write(z_tau);
      out__.write(z_lambda);
      out__.write(z_ndt);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 32;
      transf_mu_sigma = stan::math::log((1 + stan::math::exp(mu_sigma)));
      current_statement__ = 33;
      transf_mu_v = stan::math::log((1 + stan::math::exp(mu_v)));
      current_statement__ = 34;
      transf_mu_tau = stan::math::log((1 + stan::math::exp(mu_tau)));
      current_statement__ = 35;
      transf_mu_lambda = stan::math::log((1 + stan::math::exp(mu_lambda)));
      current_statement__ = 36;
      transf_mu_ndt = stan::math::log((1 + stan::math::exp(mu_ndt)));
      current_statement__ = 43;
      for (int l = 1; l <= L; ++l) {
        current_statement__ = 37;
        stan::model::assign(sigma_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_sigma +
              (stan::model::rvalue(z_sigma, "z_sigma",
                 stan::model::index_uni(l)) * sd_sigma))))),
          "assigning variable sigma_sbj", stan::model::index_uni(l));
        current_statement__ = 38;
        stan::model::assign(v_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_v +
              (stan::model::rvalue(z_v, "z_v", stan::model::index_uni(l)) *
              sd_v))))), "assigning variable v_sbj",
          stan::model::index_uni(l));
        current_statement__ = 39;
        stan::model::assign(tau_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_tau +
              (stan::model::rvalue(z_tau, "z_tau", stan::model::index_uni(l))
              * sd_tau))))), "assigning variable tau_sbj",
          stan::model::index_uni(l));
        current_statement__ = 40;
        stan::model::assign(lambda_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_lambda +
              (stan::model::rvalue(z_lambda, "z_lambda",
                 stan::model::index_uni(l)) * sd_lambda))))),
          "assigning variable lambda_sbj", stan::model::index_uni(l));
        current_statement__ = 41;
        stan::model::assign(ndt_sbj,
          stan::math::log((1 +
            stan::math::exp((mu_ndt +
              (stan::model::rvalue(z_ndt, "z_ndt", stan::model::index_uni(l))
              * sd_ndt))))), "assigning variable ndt_sbj",
          stan::model::index_uni(l));
      }
      current_statement__ = 56;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 44;
        stan::model::assign(sigma_t,
          stan::model::rvalue(sigma_sbj, "sigma_sbj",
            stan::model::index_uni(
              stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))),
          "assigning variable sigma_t", stan::model::index_uni(n));
        current_statement__ = 45;
        stan::model::assign(ndt_t,
          stan::model::rvalue(ndt_sbj, "ndt_sbj",
            stan::model::index_uni(
              stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))),
          "assigning variable ndt_t", stan::model::index_uni(n));
        current_statement__ = 48;
        for (int i = 1; i <= 3; ++i) {
          current_statement__ = 46;
          stan::model::assign(A,
            (stan::model::rvalue(val, "val", stan::model::index_uni(n),
               stan::model::index_uni(i)) +
            (stan::model::rvalue(G, "G", stan::model::index_uni(n),
               stan::model::index_uni(i)) *
            stan::model::rvalue(lambda_sbj, "lambda_sbj",
              stan::model::index_uni(
                stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n)))))),
            "assigning variable A", stan::model::index_uni(i));
        }
        current_statement__ = 49;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(1)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           2)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           3))).finished())),
          "assigning variable R", stan::model::index_uni(1));
        current_statement__ = 50;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(2)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           1)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           3))).finished())),
          "assigning variable R", stan::model::index_uni(2));
        current_statement__ = 51;
        stan::model::assign(R,
          (stan::model::rvalue(A, "A", stan::model::index_uni(3)) -
          stan::math::max(
            (Eigen::Matrix<local_scalar_t__,1,-1>(2) <<
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           1)),
                                                       stan::model::rvalue(A,
                                                         "A",
                                                         stan::model::index_uni(
                                                           2))).finished())),
          "assigning variable R", stan::model::index_uni(3));
        current_statement__ = 54;
        for (int i = 1; i <= 3; ++i) {
          current_statement__ = 52;
          stan::model::assign(drift_t,
            (stan::model::rvalue(v_sbj, "v_sbj",
               stan::model::index_uni(
                 stan::model::rvalue(sbj, "sbj", stan::model::index_uni(n))))
            / (1 +
            stan::math::exp(
              (-(stan::model::rvalue(tau_sbj, "tau_sbj",
                   stan::model::index_uni(
                     stan::model::rvalue(sbj, "sbj",
                       stan::model::index_uni(n))))) *
              stan::model::rvalue(R, "R", stan::model::index_uni(i)))))),
            "assigning variable drift_t", stan::model::index_uni(n),
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "drift_t", drift_t, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "sigma_t", sigma_t, 0);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "sigma_sbj", sigma_sbj,
        0);
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "v_sbj", v_sbj, 0);
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "tau_sbj", tau_sbj, 0);
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "lambda_sbj",
        lambda_sbj, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "ndt_sbj", ndt_sbj, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "transf_mu_sigma",
        transf_mu_sigma, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "transf_mu_v",
        transf_mu_v, 0);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "transf_mu_tau",
        transf_mu_tau, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "transf_mu_lambda",
        transf_mu_lambda, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "transf_mu_ndt",
        transf_mu_ndt, 0);
      if (emit_transformed_parameters__) {
        out__.write(drift_t);
        out__.write(sigma_t);
        out__.write(ndt_t);
        out__.write(sigma_sbj);
        out__.write(v_sbj);
        out__.write(tau_sbj);
        out__.write(lambda_sbj);
        out__.write(ndt_sbj);
        out__.write(transf_mu_sigma);
        out__.write(transf_mu_v);
        out__.write(transf_mu_tau);
        out__.write(transf_mu_lambda);
        out__.write(transf_mu_ndt);
        out__.write(A);
        out__.write(R);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 59;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 57;
          stan::model::assign(log_lik,
            race_lpdf<false>(stan::math::block(RT, n, 1, 1, 2),
              stan::math::segment(sigma_t, n, 1),
              stan::math::segment(ndt_t, n, 1),
              stan::math::block(drift_t, n, 1, 1, 3), pstream__),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ mu_sigma = DUMMY_VAR__;
      current_statement__ = 1;
      mu_sigma = in__.read<local_scalar_t__>();
      out__.write(mu_sigma);
      local_scalar_t__ mu_v = DUMMY_VAR__;
      current_statement__ = 2;
      mu_v = in__.read<local_scalar_t__>();
      out__.write(mu_v);
      local_scalar_t__ mu_tau = DUMMY_VAR__;
      current_statement__ = 3;
      mu_tau = in__.read<local_scalar_t__>();
      out__.write(mu_tau);
      local_scalar_t__ mu_lambda = DUMMY_VAR__;
      current_statement__ = 4;
      mu_lambda = in__.read<local_scalar_t__>();
      out__.write(mu_lambda);
      local_scalar_t__ mu_ndt = DUMMY_VAR__;
      current_statement__ = 5;
      mu_ndt = in__.read<local_scalar_t__>();
      out__.write(mu_ndt);
      local_scalar_t__ sd_sigma = DUMMY_VAR__;
      current_statement__ = 6;
      sd_sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_sigma);
      local_scalar_t__ sd_v = DUMMY_VAR__;
      current_statement__ = 7;
      sd_v = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_v);
      local_scalar_t__ sd_tau = DUMMY_VAR__;
      current_statement__ = 8;
      sd_tau = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_tau);
      local_scalar_t__ sd_lambda = DUMMY_VAR__;
      current_statement__ = 9;
      sd_lambda = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_lambda);
      local_scalar_t__ sd_ndt = DUMMY_VAR__;
      current_statement__ = 10;
      sd_ndt = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sd_ndt);
      std::vector<local_scalar_t__> z_sigma =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(z_sigma,
        in__.read<std::vector<local_scalar_t__>>(L),
        "assigning variable z_sigma");
      out__.write(z_sigma);
      std::vector<local_scalar_t__> z_v =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(z_v, in__.read<std::vector<local_scalar_t__>>(L),
        "assigning variable z_v");
      out__.write(z_v);
      std::vector<local_scalar_t__> z_tau =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(z_tau, in__.read<std::vector<local_scalar_t__>>(L),
        "assigning variable z_tau");
      out__.write(z_tau);
      std::vector<local_scalar_t__> z_lambda =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(z_lambda,
        in__.read<std::vector<local_scalar_t__>>(L),
        "assigning variable z_lambda");
      out__.write(z_lambda);
      std::vector<local_scalar_t__> z_ndt =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(z_ndt, in__.read<std::vector<local_scalar_t__>>(L),
        "assigning variable z_ndt");
      out__.write(z_ndt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "mu_v", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "mu_tau", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "mu_lambda",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "mu_ndt", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sd_sigma",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sd_v", "double",
        std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "sd_tau", "double",
        std::vector<size_t>{});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "sd_lambda",
        "double", std::vector<size_t>{});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "sd_ndt", "double",
        std::vector<size_t>{});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "z_sigma",
        "double", std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "z_v", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "z_tau", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "z_lambda",
        "double", std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "z_ndt", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      local_scalar_t__ mu_sigma = DUMMY_VAR__;
      current_statement__ = 1;
      mu_sigma = context__.vals_r("mu_sigma")[(1 - 1)];
      out__.write(mu_sigma);
      local_scalar_t__ mu_v = DUMMY_VAR__;
      current_statement__ = 2;
      mu_v = context__.vals_r("mu_v")[(1 - 1)];
      out__.write(mu_v);
      local_scalar_t__ mu_tau = DUMMY_VAR__;
      current_statement__ = 3;
      mu_tau = context__.vals_r("mu_tau")[(1 - 1)];
      out__.write(mu_tau);
      local_scalar_t__ mu_lambda = DUMMY_VAR__;
      current_statement__ = 4;
      mu_lambda = context__.vals_r("mu_lambda")[(1 - 1)];
      out__.write(mu_lambda);
      local_scalar_t__ mu_ndt = DUMMY_VAR__;
      current_statement__ = 5;
      mu_ndt = context__.vals_r("mu_ndt")[(1 - 1)];
      out__.write(mu_ndt);
      local_scalar_t__ sd_sigma = DUMMY_VAR__;
      current_statement__ = 6;
      sd_sigma = context__.vals_r("sd_sigma")[(1 - 1)];
      out__.write_free_lb(0, sd_sigma);
      local_scalar_t__ sd_v = DUMMY_VAR__;
      current_statement__ = 7;
      sd_v = context__.vals_r("sd_v")[(1 - 1)];
      out__.write_free_lb(0, sd_v);
      local_scalar_t__ sd_tau = DUMMY_VAR__;
      current_statement__ = 8;
      sd_tau = context__.vals_r("sd_tau")[(1 - 1)];
      out__.write_free_lb(0, sd_tau);
      local_scalar_t__ sd_lambda = DUMMY_VAR__;
      current_statement__ = 9;
      sd_lambda = context__.vals_r("sd_lambda")[(1 - 1)];
      out__.write_free_lb(0, sd_lambda);
      local_scalar_t__ sd_ndt = DUMMY_VAR__;
      current_statement__ = 10;
      sd_ndt = context__.vals_r("sd_ndt")[(1 - 1)];
      out__.write_free_lb(0, sd_ndt);
      std::vector<local_scalar_t__> z_sigma =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 11;
      z_sigma = context__.vals_r("z_sigma");
      out__.write(z_sigma);
      std::vector<local_scalar_t__> z_v =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 12;
      z_v = context__.vals_r("z_v");
      out__.write(z_v);
      std::vector<local_scalar_t__> z_tau =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 13;
      z_tau = context__.vals_r("z_tau");
      out__.write(z_tau);
      std::vector<local_scalar_t__> z_lambda =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 14;
      z_lambda = context__.vals_r("z_lambda");
      out__.write(z_lambda);
      std::vector<local_scalar_t__> z_ndt =
        std::vector<local_scalar_t__>(L, DUMMY_VAR__);
      current_statement__ = 15;
      z_ndt = context__.vals_r("z_ndt");
      out__.write(z_ndt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu_sigma", "mu_v", "mu_tau",
                "mu_lambda", "mu_ndt", "sd_sigma", "sd_v", "sd_tau",
                "sd_lambda", "sd_ndt", "z_sigma", "z_v", "z_tau", "z_lambda",
                "z_ndt"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"drift_t", "sigma_t", "ndt_t", "sigma_sbj", "v_sbj", "tau_sbj",
             "lambda_sbj", "ndt_sbj", "transf_mu_sigma", "transf_mu_v",
             "transf_mu_tau", "transf_mu_lambda", "transf_mu_ndt", "A", "R"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(L)},
                std::vector<size_t>{static_cast<size_t>(L)},
                std::vector<size_t>{static_cast<size_t>(L)},
                std::vector<size_t>{static_cast<size_t>(L)},
                std::vector<size_t>{static_cast<size_t>(L)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(3)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(L)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(3)},
             std::vector<size_t>{static_cast<size_t>(3)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu_sigma");
    param_names__.emplace_back(std::string() + "mu_v");
    param_names__.emplace_back(std::string() + "mu_tau");
    param_names__.emplace_back(std::string() + "mu_lambda");
    param_names__.emplace_back(std::string() + "mu_ndt");
    param_names__.emplace_back(std::string() + "sd_sigma");
    param_names__.emplace_back(std::string() + "sd_v");
    param_names__.emplace_back(std::string() + "sd_tau");
    param_names__.emplace_back(std::string() + "sd_lambda");
    param_names__.emplace_back(std::string() + "sd_ndt");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_ndt" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "drift_t" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "ndt_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_sbj" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "v_sbj" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "tau_sbj" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_sbj" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "ndt_sbj" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "transf_mu_sigma");
      param_names__.emplace_back(std::string() + "transf_mu_v");
      param_names__.emplace_back(std::string() + "transf_mu_tau");
      param_names__.emplace_back(std::string() + "transf_mu_lambda");
      param_names__.emplace_back(std::string() + "transf_mu_ndt");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu_sigma");
    param_names__.emplace_back(std::string() + "mu_v");
    param_names__.emplace_back(std::string() + "mu_tau");
    param_names__.emplace_back(std::string() + "mu_lambda");
    param_names__.emplace_back(std::string() + "mu_ndt");
    param_names__.emplace_back(std::string() + "sd_sigma");
    param_names__.emplace_back(std::string() + "sd_v");
    param_names__.emplace_back(std::string() + "sd_tau");
    param_names__.emplace_back(std::string() + "sd_lambda");
    param_names__.emplace_back(std::string() + "sd_ndt");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_ndt" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "drift_t" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "ndt_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_sbj" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "v_sbj" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "tau_sbj" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_sbj" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "ndt_sbj" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "transf_mu_sigma");
      param_names__.emplace_back(std::string() + "transf_mu_v");
      param_names__.emplace_back(std::string() + "transf_mu_tau");
      param_names__.emplace_back(std::string() + "transf_mu_lambda");
      param_names__.emplace_back(std::string() + "transf_mu_ndt");
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "A" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_v\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_ndt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"drift_t\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"v_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_v\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_sigma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_v\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_tau\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_ndt\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"drift_t\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"v_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_sbj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_v\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_tau\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_mu_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"A\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(3) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + L) + L) + L) + L) + L);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((N * 3) + N) + N) + L) + L) + L) + L) + L) + 1) + 1) +
      1) + 1) + 1) + 3) + 3));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((((((((1 + 1) + 1) + 1) + 1) + 1) + 1)
      + 1) + 1) + 1) + L) + L) + L) + L) + L);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((N * 3) + N) + N) + L) + L) + L) + L) + L) + 1) + 1) +
      1) + 1) + 1) + 3) + 3));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = hierGLAM_nA_additive_model_namespace::hierGLAM_nA_additive_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return hierGLAM_nA_additive_model_namespace::profiles__;
}
#endif