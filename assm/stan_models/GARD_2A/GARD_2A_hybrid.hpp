// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace GARD_2A_hybrid_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 123> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 86, column 2 to column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 87, column 2 to column 10)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 88, column 2 to column 10)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 89, column 2 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 90, column 2 to column 14)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 91, column 2 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 92, column 2 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 96, column 2 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 97, column 2 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 98, column 2 to column 29)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 99, column 2 to column 27)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 101, column 2 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 102, column 2 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 103, column 2 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 104, column 2 to column 29)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 105, column 2 to column 30)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 106, column 2 to column 36)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 107, column 2 to column 27)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 109, column 2 to column 14)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 144, column 2 to column 20)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 111, column 2 to column 29)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 112, column 2 to column 31)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 113, column 2 to column 31)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 114, column 2 to column 37)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 115, column 2 to column 39)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 116, column 2 to column 24)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 117, column 2 to column 33)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 120, column 4 to column 30)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 121, column 4 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 123, column 4 to column 56)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 124, column 4 to column 56)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 126, column 4 to column 97)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 127, column 4 to column 98)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 119, column 17 to line 128, column 3)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 119, column 2 to line 128, column 3)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 147, column 6 to column 157)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 146, column 18 to line 148, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 146, column 4 to line 148, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 145, column 2 to line 149, column 3)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 132, column 2 to column 39)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 133, column 2 to column 42)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 134, column 2 to column 42)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 135, column 2 to column 51)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 136, column 2 to column 54)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 137, column 2 to column 45)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 138, column 2 to column 45)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 140, column 2 to column 57)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 57, column 2 to column 17)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 58, column 8 to column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 58, column 2 to column 39)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 59, column 8 to column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 59, column 2 to column 28)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 61, column 8 to column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 61, column 2 to column 28)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 62, column 8 to column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 62, column 2 to column 28)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 64, column 8 to column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 64, column 2 to column 30)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 65, column 8 to column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 65, column 2 to column 30)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 67, column 2 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 68, column 2 to column 22)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 69, column 2 to column 22)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 70, column 2 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 71, column 2 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 72, column 2 to column 23)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 73, column 2 to column 23)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 77, column 10 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 77, column 2 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 80, column 4 to column 21)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 81, column 4 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 79, column 16 to line 82, column 3)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 79, column 2 to line 82, column 3)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 96, column 9 to column 10)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 97, column 9 to column 10)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 98, column 18 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 99, column 18 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 144, column 9 to column 10)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 3, column 4 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 4, column 4 to column 20)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 5, column 4 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 6, column 4 to column 29)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 7, column 4 to column 97)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 8, column 4 to column 15)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 2, column 43 to line 9, column 3)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 12, column 4 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 13, column 4 to column 20)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 14, column 4 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 15, column 4 to column 29)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 16, column 4 to column 94)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 17, column 4 to column 15)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 11, column 43 to line 18, column 3)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 22, column 4 to column 11)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 23, column 11 to column 19)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 23, column 4 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 24, column 4 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 25, column 4 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 26, column 4 to column 13)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 29, column 6 to column 27)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 48, column 10 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 47, column 10 to line 49, column 7)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 36, column 10 to column 54)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 37, column 10 to column 57)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 35, column 12 to line 38, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 32, column 10 to column 53)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 33, column 10 to column 58)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 31, column 24 to line 34, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 31, column 8 to line 38, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 39, column 8 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 41, column 12 to column 28)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 40, column 28 to line 42, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 40, column 8 to line 42, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 44, column 10 to column 26)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 43, column 27 to line 45, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 43, column 8 to line 45, column 9)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 30, column 15 to line 46, column 7)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 30, column 6 to line 49, column 7)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 28, column 25 to line 50, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 28, column 4 to line 50, column 5)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 51, column 4 to column 25)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 52, column 4 to column 15)",
  " (in '/Users/khamir/_Projects/_PHD/_01_How_to_acount_attention/_codes/assm/assm/stan_models/GARD_2A/GARD_2A_hybrid.stan', line 20, column 92 to line 53, column 3)"};
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
race_pdf(const T0__& t, const T1__& sigma, const T2__& v, std::ostream*
         pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>* = nullptr>
stan::promote_args_t<T0__, T1__, T2__>
race_cdf(const T0__& t, const T1__& sigma, const T2__& v, std::ostream*
         pstream__);
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>, stan::base_type_t<T4__>>
race_lpdf(const T0__& RT_arg__, const T1__& sigma_arg__, const T2__&
          ndt_arg__, const T3__& drift_left_arg__, const T4__&
          drift_right_arg__, std::ostream* pstream__);
// real race_pdf(real, real, real)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>*>
stan::promote_args_t<T0__, T1__, T2__>
race_pdf(const T0__& t, const T1__& sigma, const T2__& v, std::ostream*
         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ pdf = DUMMY_VAR__;
    local_scalar_t__ lambda = DUMMY_VAR__;
    local_scalar_t__ mu = DUMMY_VAR__;
    current_statement__ = 81;
    mu = (1 / v);
    current_statement__ = 82;
    lambda = (1 / stan::math::pow(sigma, 2));
    current_statement__ = 83;
    pdf = (stan::math::sqrt((lambda / ((2 * stan::math::pi()) *
             stan::math::pow(t, 3))))
      *
      stan::math::exp((-((lambda * stan::math::pow((t - mu), 2))) / ((2 *
        stan::math::pow(mu, 2)) * t))));
    current_statement__ = 84;
    return pdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real race_cdf(real, real, real)
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::math::disjunction<stan::is_autodiff<T0__>,
                                                      std::is_floating_point<T0__>>,
                              stan::math::disjunction<stan::is_autodiff<T1__>,
                                                      std::is_floating_point<T1__>>,
                              stan::math::disjunction<stan::is_autodiff<T2__>,
                                                      std::is_floating_point<T2__>>>*>
stan::promote_args_t<T0__, T1__, T2__>
race_cdf(const T0__& t, const T1__& sigma, const T2__& v, std::ostream*
         pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ cdf = DUMMY_VAR__;
    local_scalar_t__ lambda = DUMMY_VAR__;
    local_scalar_t__ mu = DUMMY_VAR__;
    current_statement__ = 88;
    mu = (1 / v);
    current_statement__ = 89;
    lambda = (1 / stan::math::pow(sigma, 2));
    current_statement__ = 90;
    cdf = (stan::math::Phi((stan::math::sqrt((lambda / t)) * ((t / mu) - 1)))
      + (stan::math::exp(((2 * lambda) / mu)) *
      stan::math::Phi((-(stan::math::sqrt((lambda / t))) * ((t / mu) + 1)))));
    current_statement__ = 91;
    return cdf;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
// real race_lpdf(matrix, vector, vector, vector, vector)
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
  stan::base_type_t<T2__>, stan::base_type_t<T3__>, stan::base_type_t<T4__>>
race_lpdf(const T0__& RT_arg__, const T1__& sigma_arg__, const T2__&
          ndt_arg__, const T3__& drift_left_arg__, const T4__&
          drift_right_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& RT = stan::math::to_ref(RT_arg__);
  const auto& sigma = stan::math::to_ref(sigma_arg__);
  const auto& ndt = stan::math::to_ref(ndt_arg__);
  const auto& drift_left = stan::math::to_ref(drift_left_arg__);
  const auto& drift_right = stan::math::to_ref(drift_right_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ t = DUMMY_VAR__;
    current_statement__ = 94;
    stan::math::validate_non_negative_index("prob", "rows(RT)",
      stan::math::rows(RT));
    Eigen::Matrix<local_scalar_t__,-1,1> prob =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(RT),
        DUMMY_VAR__);
    local_scalar_t__ cdf = DUMMY_VAR__;
    local_scalar_t__ pdf = DUMMY_VAR__;
    local_scalar_t__ out = DUMMY_VAR__;
    current_statement__ = 119;
    for (int i = 1; i <= stan::math::rows(RT); ++i) {
      current_statement__ = 99;
      t = (stan::model::rvalue(RT, "RT", stan::model::index_uni(i),
             stan::model::index_uni(1))
        - stan::model::rvalue(ndt, "ndt", stan::model::index_uni(i)));
      current_statement__ = 117;
      if (stan::math::logical_gt(t, 0)) {
        current_statement__ = 108;
        if (stan::math::logical_eq(
              stan::model::rvalue(RT, "RT", stan::model::index_uni(i),
                stan::model::index_uni(2)), 1)) {
          current_statement__ = 105;
          pdf = race_pdf(t,
                  stan::model::rvalue(sigma, "sigma",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(drift_left, "drift_left",
                    stan::model::index_uni(i)), pstream__);
          current_statement__ = 106;
          cdf = (1 -
            race_cdf(t,
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)),
              stan::model::rvalue(drift_right, "drift_right",
                stan::model::index_uni(i)), pstream__));
        } else {
          current_statement__ = 102;
          pdf = race_pdf(t,
                  stan::model::rvalue(sigma, "sigma",
                    stan::model::index_uni(i)),
                  stan::model::rvalue(drift_right, "drift_right",
                    stan::model::index_uni(i)), pstream__);
          current_statement__ = 103;
          cdf = (1 -
            race_cdf(t,
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(i)),
              stan::model::rvalue(drift_left, "drift_left",
                stan::model::index_uni(i)), pstream__));
        }
        current_statement__ = 109;
        stan::model::assign(prob, (pdf * cdf), "assigning variable prob",
          stan::model::index_uni(i));
        current_statement__ = 112;
        if (stan::math::logical_lt(
              stan::model::rvalue(prob, "prob", stan::model::index_uni(i)),
              1e-10)) {
          current_statement__ = 110;
          stan::model::assign(prob, 1e-10, "assigning variable prob",
            stan::model::index_uni(i));
        }
        current_statement__ = 115;
        if (stan::math::is_nan(
              stan::model::rvalue(prob, "prob", stan::model::index_uni(i)))) {
          current_statement__ = 113;
          stan::model::assign(prob, 1e-10, "assigning variable prob",
            stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 100;
        stan::model::assign(prob, 1e-10, "assigning variable prob",
          stan::model::index_uni(i));
      }
    }
    current_statement__ = 120;
    out = stan::math::sum(stan::math::log(prob));
    current_statement__ = 121;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class GARD_2A_hybrid_model final : public model_base_crtp<GARD_2A_hybrid_model> {
 private:
  int N;
  std::vector<int> choice;
  std::vector<double> rt;
  std::vector<double> G1;
  std::vector<double> G2;
  std::vector<double> val1;
  std::vector<double> val2;
  Eigen::Matrix<double,-1,1> v_priors_data__;
  Eigen::Matrix<double,-1,1> wd_priors_data__;
  Eigen::Matrix<double,-1,1> ws_priors_data__;
  Eigen::Matrix<double,-1,1> sigma_priors_data__;
  Eigen::Matrix<double,-1,1> lambda_priors_data__;
  Eigen::Matrix<double,-1,1> gam_priors_data__;
  Eigen::Matrix<double,-1,1> ndt_priors_data__;
  Eigen::Matrix<double,-1,-1> RT_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> v_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> wd_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ws_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> lambda_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> gam_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> ndt_priors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> RT{nullptr, 0, 0};
 public:
  ~GARD_2A_hybrid_model() {}
  GARD_2A_hybrid_model(stan::io::var_context& context__, unsigned int
                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "GARD_2A_hybrid_model_namespace::GARD_2A_hybrid_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 48;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 48;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("choice", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "choice", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      choice = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 50;
      choice = context__.vals_i("choice");
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "choice", choice, 1);
      current_statement__ = 50;
      stan::math::check_less_or_equal(function__, "choice", choice, 2);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("rt", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization", "rt", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      rt = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 52;
      rt = context__.vals_r("rt");
      current_statement__ = 52;
      stan::math::check_greater_or_equal(function__, "rt", rt, 0);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("G1", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "G1", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      G1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 54;
      G1 = context__.vals_r("G1");
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "G1", G1, 0);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("G2", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "G2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      G2 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 56;
      G2 = context__.vals_r("G2");
      current_statement__ = 56;
      stan::math::check_greater_or_equal(function__, "G2", G2, 0);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("val1", "N", N);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "val1", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      val1 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 58;
      val1 = context__.vals_r("val1");
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "val1", val1, 0);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("val2", "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization", "val2", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      val2 = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 60;
      val2 = context__.vals_r("val2");
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "val2", val2, 0);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "v_priors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      v_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                          std::numeric_limits<double>::quiet_NaN());
      new (&v_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(v_priors_data__.data(), 2);
      {
        std::vector<local_scalar_t__> v_priors_flat__;
        current_statement__ = 61;
        v_priors_flat__ = context__.vals_r("v_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(v_priors, v_priors_flat__[(pos__ - 1)],
            "assigning variable v_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 62;
      context__.validate_dims("data initialization", "wd_priors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      wd_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                           std::numeric_limits<double>::quiet_NaN());
      new (&wd_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(wd_priors_data__.data(), 2);
      {
        std::vector<local_scalar_t__> wd_priors_flat__;
        current_statement__ = 62;
        wd_priors_flat__ = context__.vals_r("wd_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(wd_priors, wd_priors_flat__[(pos__ - 1)],
            "assigning variable wd_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 63;
      context__.validate_dims("data initialization", "ws_priors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      ws_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                           std::numeric_limits<double>::quiet_NaN());
      new (&ws_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ws_priors_data__.data(), 2);
      {
        std::vector<local_scalar_t__> ws_priors_flat__;
        current_statement__ = 63;
        ws_priors_flat__ = context__.vals_r("ws_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(ws_priors, ws_priors_flat__[(pos__ - 1)],
            "assigning variable ws_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 64;
      context__.validate_dims("data initialization", "sigma_priors",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      sigma_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                              std::numeric_limits<double>::quiet_NaN());
      new (&sigma_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_priors_data__.data(), 2);
      {
        std::vector<local_scalar_t__> sigma_priors_flat__;
        current_statement__ = 64;
        sigma_priors_flat__ = context__.vals_r("sigma_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(sigma_priors, sigma_priors_flat__[(pos__ - 1)],
            "assigning variable sigma_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 65;
      context__.validate_dims("data initialization", "lambda_priors",
        "double", std::vector<size_t>{static_cast<size_t>(2)});
      lambda_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                               std::numeric_limits<double>::quiet_NaN());
      new (&lambda_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(lambda_priors_data__.data(),
        2);
      {
        std::vector<local_scalar_t__> lambda_priors_flat__;
        current_statement__ = 65;
        lambda_priors_flat__ = context__.vals_r("lambda_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(lambda_priors, lambda_priors_flat__[(pos__ -
            1)], "assigning variable lambda_priors",
            stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 66;
      context__.validate_dims("data initialization", "gam_priors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      gam_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&gam_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(gam_priors_data__.data(), 2);
      {
        std::vector<local_scalar_t__> gam_priors_flat__;
        current_statement__ = 66;
        gam_priors_flat__ = context__.vals_r("gam_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(gam_priors, gam_priors_flat__[(pos__ - 1)],
            "assigning variable gam_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 67;
      context__.validate_dims("data initialization", "ndt_priors", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      ndt_priors_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                            std::numeric_limits<double>::quiet_NaN());
      new (&ndt_priors)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(ndt_priors_data__.data(), 2);
      {
        std::vector<local_scalar_t__> ndt_priors_flat__;
        current_statement__ = 67;
        ndt_priors_flat__ = context__.vals_r("ndt_priors");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(ndt_priors, ndt_priors_flat__[(pos__ - 1)],
            "assigning variable ndt_priors", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 68;
      stan::math::validate_non_negative_index("RT", "N", N);
      current_statement__ = 69;
      RT_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, 2,
                    std::numeric_limits<double>::quiet_NaN());
      new (&RT) Eigen::Map<Eigen::Matrix<double,-1,-1>>(RT_data__.data(), N,
        2);
      current_statement__ = 73;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 70;
        stan::model::assign(RT,
          stan::model::rvalue(rt, "rt", stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
          stan::model::index_uni(1));
        current_statement__ = 71;
        stan::model::assign(RT,
          stan::model::rvalue(choice, "choice", stan::model::index_uni(n)),
          "assigning variable RT", stan::model::index_uni(n),
          stan::model::index_uni(2));
      }
      current_statement__ = 74;
      stan::math::validate_non_negative_index("drift_left_t", "N", N);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("drift_right_t", "N", N);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("sigma_t", "N", N);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("ndt_t", "N", N);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "GARD_2A_hybrid_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = "};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "GARD_2A_hybrid_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 1;
      v = in__.template read<local_scalar_t__>();
      local_scalar_t__ wd = DUMMY_VAR__;
      current_statement__ = 2;
      wd = in__.template read<local_scalar_t__>();
      local_scalar_t__ ws = DUMMY_VAR__;
      current_statement__ = 3;
      ws = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read<local_scalar_t__>();
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 5;
      lambda = in__.template read<local_scalar_t__>();
      local_scalar_t__ gam = DUMMY_VAR__;
      current_statement__ = 6;
      gam = in__.template read<local_scalar_t__>();
      local_scalar_t__ ndt = DUMMY_VAR__;
      current_statement__ = 7;
      ndt = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> drift_left_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> drift_right_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ndt_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ transf_v = DUMMY_VAR__;
      local_scalar_t__ transf_wd = DUMMY_VAR__;
      local_scalar_t__ transf_ws = DUMMY_VAR__;
      local_scalar_t__ transf_sigma = DUMMY_VAR__;
      local_scalar_t__ transf_lambda = DUMMY_VAR__;
      local_scalar_t__ transf_gam = DUMMY_VAR__;
      local_scalar_t__ transf_ndt = DUMMY_VAR__;
      local_scalar_t__ A1 = DUMMY_VAR__;
      local_scalar_t__ A2 = DUMMY_VAR__;
      current_statement__ = 21;
      transf_v = stan::math::log((1 + stan::math::exp(v)));
      current_statement__ = 22;
      transf_wd = stan::math::log((1 + stan::math::exp(wd)));
      current_statement__ = 23;
      transf_ws = stan::math::log((1 + stan::math::exp(ws)));
      current_statement__ = 24;
      transf_sigma = stan::math::log((1 + stan::math::exp(sigma)));
      current_statement__ = 25;
      transf_lambda = stan::math::log((1 + stan::math::exp(lambda)));
      current_statement__ = 26;
      transf_gam = stan::math::Phi(gam);
      current_statement__ = 27;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 35;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 28;
        stan::model::assign(sigma_t, transf_sigma,
          "assigning variable sigma_t", stan::model::index_uni(n));
        current_statement__ = 29;
        stan::model::assign(ndt_t, transf_ndt, "assigning variable ndt_t",
          stan::model::index_uni(n));
        current_statement__ = 30;
        A1 = ((stan::model::rvalue(G1, "G1", stan::model::index_uni(n)) *
          stan::model::rvalue(val1, "val1", stan::model::index_uni(n))) +
          ((transf_gam * (1 -
          stan::model::rvalue(G1, "G1", stan::model::index_uni(n)))) *
          stan::model::rvalue(val1, "val1", stan::model::index_uni(n))));
        current_statement__ = 31;
        A2 = ((stan::model::rvalue(G2, "G2", stan::model::index_uni(n)) *
          stan::model::rvalue(val2, "val2", stan::model::index_uni(n))) +
          ((transf_gam * (1 -
          stan::model::rvalue(G2, "G2", stan::model::index_uni(n)))) *
          stan::model::rvalue(val2, "val2", stan::model::index_uni(n))));
        current_statement__ = 32;
        stan::model::assign(drift_left_t, (((transf_v + (transf_wd * (A1 -
          A2))) + (transf_ws * (A1 + A2))) + (transf_lambda *
          stan::model::rvalue(G1, "G1", stan::model::index_uni(n)))),
          "assigning variable drift_left_t", stan::model::index_uni(n));
        current_statement__ = 33;
        stan::model::assign(drift_right_t, (((transf_v + (transf_wd * (A2 -
          A1))) + (transf_ws * (A2 + A1))) + (transf_lambda *
          stan::model::rvalue(G2, "G2", stan::model::index_uni(n)))),
          "assigning variable drift_right_t", stan::model::index_uni(n));
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "sigma_t", sigma_t, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "transf_v", transf_v, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "transf_wd", transf_wd,
        0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "transf_ws", transf_ws,
        0);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "transf_sigma",
        transf_sigma, 0);
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "transf_lambda",
        transf_lambda, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "transf_gam",
        transf_gam, 0);
      current_statement__ = 17;
      stan::math::check_less_or_equal(function__, "transf_gam", transf_gam, 1);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "transf_ndt",
        transf_ndt, 0);
      {
        current_statement__ = 40;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(v,
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 41;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(wd,
                         stan::model::rvalue(wd_priors, "wd_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(wd_priors, "wd_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 42;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(ws,
                         stan::model::rvalue(ws_priors, "ws_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(ws_priors, "ws_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 43;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma,
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(lambda,
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gam,
                         stan::model::rvalue(gam_priors, "gam_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(gam_priors, "gam_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 46;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(ndt,
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 47;
        lp_accum__.add(race_lpdf<propto__>(RT, sigma_t, ndt_t, drift_left_t,
                         drift_right_t, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "GARD_2A_hybrid_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 1;
      v = in__.template read<local_scalar_t__>();
      local_scalar_t__ wd = DUMMY_VAR__;
      current_statement__ = 2;
      wd = in__.template read<local_scalar_t__>();
      local_scalar_t__ ws = DUMMY_VAR__;
      current_statement__ = 3;
      ws = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read<local_scalar_t__>();
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 5;
      lambda = in__.template read<local_scalar_t__>();
      local_scalar_t__ gam = DUMMY_VAR__;
      current_statement__ = 6;
      gam = in__.template read<local_scalar_t__>();
      local_scalar_t__ ndt = DUMMY_VAR__;
      current_statement__ = 7;
      ndt = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> drift_left_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> drift_right_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ndt_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ transf_v = DUMMY_VAR__;
      local_scalar_t__ transf_wd = DUMMY_VAR__;
      local_scalar_t__ transf_ws = DUMMY_VAR__;
      local_scalar_t__ transf_sigma = DUMMY_VAR__;
      local_scalar_t__ transf_lambda = DUMMY_VAR__;
      local_scalar_t__ transf_gam = DUMMY_VAR__;
      local_scalar_t__ transf_ndt = DUMMY_VAR__;
      local_scalar_t__ A1 = DUMMY_VAR__;
      local_scalar_t__ A2 = DUMMY_VAR__;
      current_statement__ = 21;
      transf_v = stan::math::log((1 + stan::math::exp(v)));
      current_statement__ = 22;
      transf_wd = stan::math::log((1 + stan::math::exp(wd)));
      current_statement__ = 23;
      transf_ws = stan::math::log((1 + stan::math::exp(ws)));
      current_statement__ = 24;
      transf_sigma = stan::math::log((1 + stan::math::exp(sigma)));
      current_statement__ = 25;
      transf_lambda = stan::math::log((1 + stan::math::exp(lambda)));
      current_statement__ = 26;
      transf_gam = stan::math::Phi(gam);
      current_statement__ = 27;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 35;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 28;
        stan::model::assign(sigma_t, transf_sigma,
          "assigning variable sigma_t", stan::model::index_uni(n));
        current_statement__ = 29;
        stan::model::assign(ndt_t, transf_ndt, "assigning variable ndt_t",
          stan::model::index_uni(n));
        current_statement__ = 30;
        A1 = ((stan::model::rvalue(G1, "G1", stan::model::index_uni(n)) *
          stan::model::rvalue(val1, "val1", stan::model::index_uni(n))) +
          ((transf_gam * (1 -
          stan::model::rvalue(G1, "G1", stan::model::index_uni(n)))) *
          stan::model::rvalue(val1, "val1", stan::model::index_uni(n))));
        current_statement__ = 31;
        A2 = ((stan::model::rvalue(G2, "G2", stan::model::index_uni(n)) *
          stan::model::rvalue(val2, "val2", stan::model::index_uni(n))) +
          ((transf_gam * (1 -
          stan::model::rvalue(G2, "G2", stan::model::index_uni(n)))) *
          stan::model::rvalue(val2, "val2", stan::model::index_uni(n))));
        current_statement__ = 32;
        stan::model::assign(drift_left_t, (((transf_v + (transf_wd * (A1 -
          A2))) + (transf_ws * (A1 + A2))) + (transf_lambda *
          stan::model::rvalue(G1, "G1", stan::model::index_uni(n)))),
          "assigning variable drift_left_t", stan::model::index_uni(n));
        current_statement__ = 33;
        stan::model::assign(drift_right_t, (((transf_v + (transf_wd * (A2 -
          A1))) + (transf_ws * (A2 + A1))) + (transf_lambda *
          stan::model::rvalue(G2, "G2", stan::model::index_uni(n)))),
          "assigning variable drift_right_t", stan::model::index_uni(n));
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "sigma_t", sigma_t, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "transf_v", transf_v, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "transf_wd", transf_wd,
        0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "transf_ws", transf_ws,
        0);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "transf_sigma",
        transf_sigma, 0);
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "transf_lambda",
        transf_lambda, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "transf_gam",
        transf_gam, 0);
      current_statement__ = 17;
      stan::math::check_less_or_equal(function__, "transf_gam", transf_gam, 1);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "transf_ndt",
        transf_ndt, 0);
      {
        current_statement__ = 40;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(v,
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(v_priors, "v_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 41;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(wd,
                         stan::model::rvalue(wd_priors, "wd_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(wd_priors, "wd_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 42;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(ws,
                         stan::model::rvalue(ws_priors, "ws_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(ws_priors, "ws_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 43;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma,
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(sigma_priors, "sigma_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 44;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(lambda,
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(lambda_priors, "lambda_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 45;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gam,
                         stan::model::rvalue(gam_priors, "gam_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(gam_priors, "gam_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 46;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(ndt,
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(ndt_priors, "ndt_priors",
                           stan::model::index_uni(2))));
        current_statement__ = 47;
        lp_accum__.add(race_lpdf<propto__>(RT, sigma_t, ndt_t, drift_left_t,
                         drift_right_t, pstream__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "GARD_2A_hybrid_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double v = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      v = in__.template read<local_scalar_t__>();
      double wd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      wd = in__.template read<local_scalar_t__>();
      double ws = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      ws = in__.template read<local_scalar_t__>();
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma = in__.template read<local_scalar_t__>();
      double lambda = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      lambda = in__.template read<local_scalar_t__>();
      double gam = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      gam = in__.template read<local_scalar_t__>();
      double ndt = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      ndt = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> drift_left_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> drift_right_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sigma_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ndt_t =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      double transf_v = std::numeric_limits<double>::quiet_NaN();
      double transf_wd = std::numeric_limits<double>::quiet_NaN();
      double transf_ws = std::numeric_limits<double>::quiet_NaN();
      double transf_sigma = std::numeric_limits<double>::quiet_NaN();
      double transf_lambda = std::numeric_limits<double>::quiet_NaN();
      double transf_gam = std::numeric_limits<double>::quiet_NaN();
      double transf_ndt = std::numeric_limits<double>::quiet_NaN();
      double A1 = std::numeric_limits<double>::quiet_NaN();
      double A2 = std::numeric_limits<double>::quiet_NaN();
      out__.write(v);
      out__.write(wd);
      out__.write(ws);
      out__.write(sigma);
      out__.write(lambda);
      out__.write(gam);
      out__.write(ndt);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 21;
      transf_v = stan::math::log((1 + stan::math::exp(v)));
      current_statement__ = 22;
      transf_wd = stan::math::log((1 + stan::math::exp(wd)));
      current_statement__ = 23;
      transf_ws = stan::math::log((1 + stan::math::exp(ws)));
      current_statement__ = 24;
      transf_sigma = stan::math::log((1 + stan::math::exp(sigma)));
      current_statement__ = 25;
      transf_lambda = stan::math::log((1 + stan::math::exp(lambda)));
      current_statement__ = 26;
      transf_gam = stan::math::Phi(gam);
      current_statement__ = 27;
      transf_ndt = stan::math::log((1 + stan::math::exp(ndt)));
      current_statement__ = 35;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 28;
        stan::model::assign(sigma_t, transf_sigma,
          "assigning variable sigma_t", stan::model::index_uni(n));
        current_statement__ = 29;
        stan::model::assign(ndt_t, transf_ndt, "assigning variable ndt_t",
          stan::model::index_uni(n));
        current_statement__ = 30;
        A1 = ((stan::model::rvalue(G1, "G1", stan::model::index_uni(n)) *
          stan::model::rvalue(val1, "val1", stan::model::index_uni(n))) +
          ((transf_gam * (1 -
          stan::model::rvalue(G1, "G1", stan::model::index_uni(n)))) *
          stan::model::rvalue(val1, "val1", stan::model::index_uni(n))));
        current_statement__ = 31;
        A2 = ((stan::model::rvalue(G2, "G2", stan::model::index_uni(n)) *
          stan::model::rvalue(val2, "val2", stan::model::index_uni(n))) +
          ((transf_gam * (1 -
          stan::model::rvalue(G2, "G2", stan::model::index_uni(n)))) *
          stan::model::rvalue(val2, "val2", stan::model::index_uni(n))));
        current_statement__ = 32;
        stan::model::assign(drift_left_t, (((transf_v + (transf_wd * (A1 -
          A2))) + (transf_ws * (A1 + A2))) + (transf_lambda *
          stan::model::rvalue(G1, "G1", stan::model::index_uni(n)))),
          "assigning variable drift_left_t", stan::model::index_uni(n));
        current_statement__ = 33;
        stan::model::assign(drift_right_t, (((transf_v + (transf_wd * (A2 -
          A1))) + (transf_ws * (A2 + A1))) + (transf_lambda *
          stan::model::rvalue(G2, "G2", stan::model::index_uni(n)))),
          "assigning variable drift_right_t", stan::model::index_uni(n));
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "sigma_t", sigma_t, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "ndt_t", ndt_t, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "transf_v", transf_v, 0);
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "transf_wd", transf_wd,
        0);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "transf_ws", transf_ws,
        0);
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "transf_sigma",
        transf_sigma, 0);
      current_statement__ = 16;
      stan::math::check_greater_or_equal(function__, "transf_lambda",
        transf_lambda, 0);
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "transf_gam",
        transf_gam, 0);
      current_statement__ = 17;
      stan::math::check_less_or_equal(function__, "transf_gam", transf_gam, 1);
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "transf_ndt",
        transf_ndt, 0);
      if (emit_transformed_parameters__) {
        out__.write(drift_left_t);
        out__.write(drift_right_t);
        out__.write(sigma_t);
        out__.write(ndt_t);
        out__.write(transf_v);
        out__.write(transf_wd);
        out__.write(transf_ws);
        out__.write(transf_sigma);
        out__.write(transf_lambda);
        out__.write(transf_gam);
        out__.write(transf_ndt);
        out__.write(A1);
        out__.write(A2);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 38;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 36;
          stan::model::assign(log_lik,
            race_lpdf<false>(stan::math::block(RT, n, 1, 1, 2),
              stan::math::segment(sigma_t, n, 1),
              stan::math::segment(ndt_t, n, 1),
              stan::math::segment(drift_left_t, n, 1),
              stan::math::segment(drift_right_t, n, 1), pstream__),
            "assigning variable log_lik", stan::model::index_uni(n));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 1;
      v = in__.read<local_scalar_t__>();
      out__.write(v);
      local_scalar_t__ wd = DUMMY_VAR__;
      current_statement__ = 2;
      wd = in__.read<local_scalar_t__>();
      out__.write(wd);
      local_scalar_t__ ws = DUMMY_VAR__;
      current_statement__ = 3;
      ws = in__.read<local_scalar_t__>();
      out__.write(ws);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.read<local_scalar_t__>();
      out__.write(sigma);
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 5;
      lambda = in__.read<local_scalar_t__>();
      out__.write(lambda);
      local_scalar_t__ gam = DUMMY_VAR__;
      current_statement__ = 6;
      gam = in__.read<local_scalar_t__>();
      out__.write(gam);
      local_scalar_t__ ndt = DUMMY_VAR__;
      current_statement__ = 7;
      ndt = in__.read<local_scalar_t__>();
      out__.write(ndt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "v", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "wd", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "ws", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "gam", "double",
        std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "ndt", "double",
        std::vector<size_t>{});
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 1;
      v = context__.vals_r("v")[(1 - 1)];
      out__.write(v);
      local_scalar_t__ wd = DUMMY_VAR__;
      current_statement__ = 2;
      wd = context__.vals_r("wd")[(1 - 1)];
      out__.write(wd);
      local_scalar_t__ ws = DUMMY_VAR__;
      current_statement__ = 3;
      ws = context__.vals_r("ws")[(1 - 1)];
      out__.write(ws);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      out__.write(sigma);
      local_scalar_t__ lambda = DUMMY_VAR__;
      current_statement__ = 5;
      lambda = context__.vals_r("lambda")[(1 - 1)];
      out__.write(lambda);
      local_scalar_t__ gam = DUMMY_VAR__;
      current_statement__ = 6;
      gam = context__.vals_r("gam")[(1 - 1)];
      out__.write(gam);
      local_scalar_t__ ndt = DUMMY_VAR__;
      current_statement__ = 7;
      ndt = context__.vals_r("ndt")[(1 - 1)];
      out__.write(ndt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"v", "wd", "ws", "sigma", "lambda",
                "gam", "ndt"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"drift_left_t", "drift_right_t", "sigma_t", "ndt_t", "transf_v",
             "transf_wd", "transf_ws", "transf_sigma", "transf_lambda",
             "transf_gam", "transf_ndt", "A1", "A2"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "v");
    param_names__.emplace_back(std::string() + "wd");
    param_names__.emplace_back(std::string() + "ws");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "lambda");
    param_names__.emplace_back(std::string() + "gam");
    param_names__.emplace_back(std::string() + "ndt");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "drift_left_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "drift_right_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "ndt_t" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "transf_v");
      param_names__.emplace_back(std::string() + "transf_wd");
      param_names__.emplace_back(std::string() + "transf_ws");
      param_names__.emplace_back(std::string() + "transf_sigma");
      param_names__.emplace_back(std::string() + "transf_lambda");
      param_names__.emplace_back(std::string() + "transf_gam");
      param_names__.emplace_back(std::string() + "transf_ndt");
      param_names__.emplace_back(std::string() + "A1");
      param_names__.emplace_back(std::string() + "A2");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "v");
    param_names__.emplace_back(std::string() + "wd");
    param_names__.emplace_back(std::string() + "ws");
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "lambda");
    param_names__.emplace_back(std::string() + "gam");
    param_names__.emplace_back(std::string() + "ndt");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "drift_left_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "drift_right_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "sigma_t" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "ndt_t" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "transf_v");
      param_names__.emplace_back(std::string() + "transf_wd");
      param_names__.emplace_back(std::string() + "transf_ws");
      param_names__.emplace_back(std::string() + "transf_sigma");
      param_names__.emplace_back(std::string() + "transf_lambda");
      param_names__.emplace_back(std::string() + "transf_gam");
      param_names__.emplace_back(std::string() + "transf_ndt");
      param_names__.emplace_back(std::string() + "A1");
      param_names__.emplace_back(std::string() + "A2");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"wd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gam\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_left_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_right_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"transf_v\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_wd\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ws\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_gam\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"A1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"A2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"wd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ws\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gam\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ndt\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"drift_left_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drift_right_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ndt_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"transf_v\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_wd\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ws\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_lambda\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_gam\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"transf_ndt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"A1\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"A2\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((N + N) + N) + N) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
      1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((1 + 1) + 1) + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((N + N) + N) + N) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) +
      1));
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = GARD_2A_hybrid_model_namespace::GARD_2A_hybrid_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return GARD_2A_hybrid_model_namespace::profiles__;
}
#endif